package org.spring.azure.hub.example.listeners;

import com.azure.messaging.servicebus.ServiceBusErrorContext;
import lombok.extern.slf4j.Slf4j;
import org.spring.azure.hub.annotation.ErrorHandler;
import org.spring.azure.hub.annotation.QueueListener;
import org.spring.azure.hub.annotation.TopicListener;
import org.spring.azure.hub.example.service.MessageProcessor;
import org.spring.azure.hub.example.model.MalwareScanResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

@ConditionalOnProperty(name = "example.listener", havingValue = "auto") @Slf4j
public @Component class MalwareScanListenerAuto {

    private @Autowired MessageProcessor messageProcessor;

    @TopicListener(topic = "malware-detected", subscription = "on-cloud")
    public void processMalwareDetectedMessage(MalwareScanResult message) {
        messageProcessor.process(message);
    }

    @TopicListener(topic = "malware-detected", subscription = "on-cloud", isDeadLetterQueue = true)
    public void processMalwareDetectedMessageDLQ(MalwareScanResult message) {
        messageProcessor.process(message);
    }

    @QueueListener("secure")
    public void processSecureMessage(MalwareScanResult message) {
        messageProcessor.process(message);
    }

    @QueueListener(value = "secure", isDeadLetterQueue = true)
    public void processSecureMessageDLQ(MalwareScanResult message) {
        messageProcessor.process(message);
    }

    @ErrorHandler(topic = "malware-detected", subscription = "on-cloud")
    public void processMalwareDetectedMessageError(ServiceBusErrorContext errorContext) {
        log.error("Error processing message: '{}'. Exception: {}",
                errorContext.getEntityPath(), errorContext.getException());
    }
}