package org.spring.azure.hub.example.listeners;

import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;
import org.spring.azure.hub.annotation.QueueListener;
import org.spring.azure.hub.annotation.TopicListener;
import org.spring.azure.hub.example.service.MessageProcessor;
import org.spring.azure.hub.example.model.MalwareScanResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

@ConditionalOnProperty(name = "example.listener", havingValue = "manual")
public @Component class MalwareScanListenerManual {

    private @Autowired MessageProcessor messageProcessor;

    @TopicListener(topic = "malware-detected", subscription = "on-cloud")
    public void processMalwareDetectedMessage(MalwareScanResult message, ServiceBusReceivedMessageContext context) {
        try {
            messageProcessor.process(message);
            context.complete();
        } catch (Throwable e) {
            //Keeping lock
            //context.abandon();
        }
    }

    @TopicListener(topic = "malware-detected", subscription = "on-cloud", isDeadLetterQueue = true)
    public void processMalwareDetectedMessageDLQ(MalwareScanResult message, ServiceBusReceivedMessageContext context) {
        try {
            messageProcessor.process(message);
            context.complete();
        } catch (Throwable e) {
            //Removing lock
            context.abandon();
        }
    }

    @QueueListener("secure")
    public void processSecureMessage(MalwareScanResult message, ServiceBusReceivedMessageContext context) {
        messageProcessor.process(message);
        context.complete();
        //Keeping lock
        //context.abandon();
    }

    @QueueListener(value = "secure", isDeadLetterQueue = true)
    public void processSecureMessageDLQ(MalwareScanResult message, ServiceBusReceivedMessageContext context) {
        try {
            messageProcessor.process(message);
            context.complete();
        } catch (Exception e) {
            //Removing lock
            context.abandon();
        }
    }
}